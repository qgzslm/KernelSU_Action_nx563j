# .github/workflows/build-kernel.yml
name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      PYTHON_VERSION: 2.7
    steps:
    - uses: actions/checkout@v4

    - name: Setup Configuration
      run: |
        while IFS= read -r line; do
          if [[ $line == KERNEL_* || $line == USE_* || $line == *_IMAGE* ]]; then
            key="${line%%=*}"
            value="${line#*=}"
            echo "$key=$value" >> $GITHUB_ENV
          fi
        done < config.env

    - name: Setup build environment
      run: |
        # 修复APT源配置
        sudo sed -i 's/azure.archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list
        sudo sed -i 's/security.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list
        
        # 添加多架构支持
        sudo dpkg --add-architecture arm64
        sudo dpkg --add-architecture armhf
        sudo apt-get update -y --fix-missing
        
        # 安装基础依赖
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository -y ppa:deadsnakes/ppa
        sudo apt-get update
        
        # 安装Python 2.7
        sudo apt-get install -y \
          python${PYTHON_VERSION} \
          python${PYTHON_VERSION}-dev \
          python-is-python3

        # 安装多架构编译依赖（关键修复）
        sudo apt-get install -y \
          crossbuild-essential-arm64 \
          crossbuild-essential-armhf \
          libssl-dev:arm64=3.0.2-0ubuntu1.10 \
          libssl-dev:armhf=3.0.2-0ubuntu1.10 \
          libc6-dev-arm64-cross \
          libc6-dev-armhf-cross \
          binutils-aarch64-linux-gnu \
          binutils-arm-linux-gnueabihf

        # 其他构建工具
        sudo apt-get install -y \
          git ccache automake flex lzop bison gperf \
          zip curl zlib1g-dev g++-multilib libxml2-utils \
          squashfs-tools schedtool liblz4-tool make \
          maven lib32ncurses5-dev libx11-dev \
          xsltproc unzip device-tree-compiler

        # 修复符号链接
        sudo ln -sf /usr/bin/python${PYTHON_VERSION} /usr/local/bin/python2
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: Download toolchains
      timeout-minutes: 10
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        # 使用国内镜像加速
        wget https://mirror.nju.edu.cn/android/prebuilts/clang/host/linux-x86/clang-${{ env.CLANG_VERSION }}.tar.gz -O clang.tar.gz
        mkdir clang-aosp && tar -xzf clang.tar.gz -C clang-aosp --strip-components 1
        
        wget https://mirror.nju.edu.cn/android/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/android-12.1.0_r27.tar.gz -O gcc-aosp.tar.gz
        mkdir gcc-aosp && tar -xzf gcc-aosp.tar.gz -C gcc-aosp --strip-components 1
        
        wget https://mirror.nju.edu.cn/android/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/android-12.1.0_r27.tar.gz -O gcc32-aosp.tar.gz
        mkdir gcc32-aosp && tar -xzf gcc32-aosp.tar.gz -C gcc32-aosp --strip-components 1

    - name: Build Kernel
      env:
        KBUILD_BUILD_USER: ${{ github.actor }}
        KBUILD_BUILD_HOST: GitHub-Actions
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone --depth=1 --branch=${{ env.KERNEL_SOURCE_BRANCH }} ${{ env.KERNEL_SOURCE }} android-kernel
        
        if [ "${{ env.USE_KERNELSU }}" = "true" ]; then
          curl -sSL "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s -- android-kernel
        fi
        
        export PATH="$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH"
        # 两阶段编译
        make -j$(nproc) -C android-kernel O=out \
          ARCH=${{ env.TARGET_ARCH }} \
          CC=clang \
          CROSS_COMPILE=aarch64-linux-android- \
          CROSS_COMPILE_ARM32=arm-linux-androideabi- \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          ${{ env.BUILD_EXTRA_COMMAND }} \
          ${{ env.KERNEL_DEFCONFIG }}

        make -j$(nproc) -C android-kernel O=out \
          ARCH=${{ env.TARGET_ARCH }} \
          CC=clang \
          CROSS_COMPILE=aarch64-linux-android- \
          CROSS_COMPILE_ARM32=arm-linux-androideabi- \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          ${{ env.BUILD_EXTRA_COMMAND }}

    - name: Package artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.DEVICE }}-${{ github.run_id }}
        path: $GITHUB_WORKSPACE/kernel_workspace/android-kernel/out/arch/${{ env.TARGET_ARCH }}/boot/*
