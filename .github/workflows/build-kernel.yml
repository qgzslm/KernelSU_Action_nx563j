# .github/workflows/build-kernel.yml
name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      PYTHON_VERSION: 2.7
    steps:
    - uses: actions/checkout@v4

    # 🔧 修复环境变量加载逻辑
    - name: Load Config
      run: |
        grep -E '^(KERNEL_|USE_|DEVICE|CLANG)' config.env | sed 's/^/export /' >> $GITHUB_ENV

    # 🔧 彻底重建APT源配置
    - name: Setup Build Environment
      run: |
        # 清除错误配置
        sudo rm -f /etc/apt/sources.list.d/*
        # 使用清华镜像源
        sudo tee /etc/apt/sources.list << EOL
        deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
        deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
        deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
        deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
        EOL

        # 🔧 修复多架构支持
        sudo dpkg --add-architecture arm64
        sudo dpkg --add-architecture armhf
        sudo apt-get update -y
        sudo apt --fix-broken install -y

        # 🔧 指定架构安装依赖
        sudo apt-get install -y \
          python${PYTHON_VERSION} \
          python${PYTHON_VERSION}-dev \
          crossbuild-essential-arm64 \
          crossbuild-essential-armhf \
          libssl-dev:arm64=3.0.2-0ubuntu1.10 \
          libssl-dev:armhf=3.0.2-0ubuntu1.10 \
          binutils-aarch64-linux-gnu \
          binutils-arm-linux-gnueabihf

    # 🔧 优化下载重试机制
    - name: Download Toolchains
      timeout-minutes: 5
      run: |
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
        cd $GITHUB_WORKSPACE/kernel_workspace
        
        wget --tries=3 --retry-connrefused \
          https://mirrors.tuna.tsinghua.edu.cn/android/prebuilts/clang/host/linux-x86/clang-${{ env.CLANG_VERSION }}.tar.gz \
          -O clang.tar.gz
        mkdir clang-aosp && tar -xzf clang.tar.gz -C clang-aosp --strip-components 1

    - name: Build Kernel
      env:
        KBUILD_BUILD_USER: ${{ github.actor }}
        KBUILD_BUILD_HOST: GitHub-Actions
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        # 带重试的克隆命令
        for i in {1..3}; do git clone --depth=1 --branch=${{ env.KERNEL_SOURCE_BRANCH }} ${{ env.KERNEL_SOURCE }} android-kernel && break || sleep 15; done
        
        # 应用KernelSU补丁
        [ "${{ env.USE_KERNELSU }}" = "true" ] && {
          curl -sSL --retry 3 "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s -- android-kernel
        }
        
        # 编译配置
        export PATH="$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH"
        make -j$(nproc) -C android-kernel O=out \
          ARCH=arm64 \
          CC=clang \
          CROSS_COMPILE=aarch64-linux-android- \
          LLVM=1 \
          ${{ env.KERNEL_DEFCONFIG }}

        # 执行编译
        make -j$(nproc) -C android-kernel O=out \
          ARCH=arm64 \
          CC=clang \
          CROSS_COMPILE=aarch64-linux-android- \
          LLVM=1

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.DEVICE }}-build
        path: $GITHUB_WORKSPACE/kernel_workspace/android-kernel/out/arch/arm64/boot/
